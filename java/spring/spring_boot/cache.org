** Using @Cacheable

Declaring cache semantics directly in the Java source code puts the declarations much closer to the affected code. There is not much danger of undue coupling, because code that is meant to have its results cached is almost always deployed that way anyway.

The ease-of-use afforded by the use of the @Cacheable annotation is best illustrated with an example, which is explained in the text that follows. Consider the following interface and class definition: ``` public interface WeatherDao {

public Weather getWeather(String zipCode);
#+BEGIN_SRC 
public List<Location> findLocations(String locationSearch);

}

public class DefaultWeatherDao implements WeatherDao {

@Cacheable(cacheName="weatherCache")
public Weather getWeather(String zipCode) {
    //Some Code
}

@Cacheable(cacheName="locationSearchCache")
public List<Location> findLocations(String locationSearch) {
    //Some Code
}

} ```

#+END_SRC
When the above POJO is defined as a bean in a Spring IoC container, the bean instance can be made 'cacheable' by adding merely one line of XML configuration: ``` http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd">
#+BEGIN_SRC 
<ehcache:annotation-driven cache-manager="ehCacheManager" />

<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>

<bean id="weatherDao" class="x.y.service.DefaultWeatherDao"/>

```

Also the following ehcache.xml configuration file must be present on the classpath to declare and configure the two caches. ```

<defaultCache eternal="false" maxElementsInMemory="1000"
    overflowToDisk="false" diskPersistent="false" timeToIdleSeconds="0"
    timeToLiveSeconds="600" memoryStoreEvictionPolicy="LRU"/>

<cache name="weatherCache" eternal="false"
    maxElementsInMemory="100" overflowToDisk="false" diskPersistent="false"
    timeToIdleSeconds="0" timeToLiveSeconds="300"
    memoryStoreEvictionPolicy="LRU" />

<cache name="locationSearchCache" eternal="false"
    maxElementsInMemory="100" overflowToDisk="false" diskPersistent="false"
    timeToIdleSeconds="0" timeToLiveSeconds="300"
    memoryStoreEvictionPolicy="LRU" />

    ```
#+END_SRC

** CacheManager Reference
You can omit the cache-manager attribute in the <ehcache:annotation-driven/> tag 
if the bean name of the CacheManager that you want to wire in has the name cacheManager. 
If the CacheManager bean that you want to dependency-inject has any other name, then you have to use the cache-manager attribute explicitly, as in the preceding example.
** EhCache Configuration
You must configure EhCache correctly to use the @Cacheable annotation. If you are not familiar with configuring EhCache please read their configuration guide
** Annotation Placement
You can place the @Cacheable annotation on a method on an interface, or a public method on a class. However, the mere presence of the @Cacheable annotation is not enough to activate the caching behavior. The @Cacheable annotation is simply metadata that can be consumed by some runtime infrastructure that is @Cacheable-aware and that can use the metadata to configure the appropriate beans with caching behavior. In the preceding example, the <ehcache:annotation-driven/> element switches on the caching behavior.
Spring recommends that you only annotate methods of concrete classes with the @Cacheable annotation, as opposed to annotating methods of interfaces. You certainly can place the @Cacheable annotation on an interface (or an interface method), but this works only as you would expect it to if you are using interface-based proxies. The fact that Java annotations are not inherited from interfaces means that if you are using class-based proxies (proxy-target-class="true") then the transaction settings are not recognized by the proxying and weaving infrastructure, and the object will not be wrapped in a caching proxy, which would be decidedly bad.
** (重要) Method visibility and @Cacheable
When using proxies, you should apply the @Cacheable annotation only to methods with public visibility. 
If you do annotate protected, private or package-visible methods with the @Cacheable annotation,
 no error is raised, but the annotated method does not exhibit the configured cachable settings.
** (重要) Self-Invocation 
Only external method calls coming in through the proxy are intercepted. This means that self-invocation, in effect, a method within the target object calling another method of the target object, will not lead to an actual cache interception at runtime
 even if the invoked method is marked with @Cacheable.
